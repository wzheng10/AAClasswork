What is recursion?
a function/method that calls itself
    def do-stuff
        do-stuff
    end

Factorial is natural recursive
6! = 6 * 5 * 4 * 3 * 2 * 1 = 6 * 5!
    5! = 5 * 4 * 3 * 2 * 1 = 5 * 4!
        4! = 4 * 3 * 2 * 1 = 4 * 3!
            3! = 3 * 2 * 1 = 3 * 2!
                2! = 2 * 1 = 2 * 1
                    1! = 1      #Base Case
Base case & Inductive Step
def factorial(n)
    return 1 if n == 1  #==> the base case
    n * factorial(n-1)  # 5 * 4!    #==> inductive-step
end

Recursions vs Iteration
1. upcase
2. reverse
2. quick_sort

Stackoverflow-limit on the number despite the ability to compute it

SystemStackError: stack level too deep
after a certain number it will return a SystemStackError in a recursion

Everything runs in a stackframe called main(i.e. self)

Mathematical Induction- it tells us that if we can solve for a base case then
we can solve for the general case, then we have solved for all the cases
Key is to 
    A. Identify how you can grow a smaller solution into a bigger problem
    B. Identify base cases which will be the "foundations" of your tower of recursion

Each nested method is added to what is called a stack and each time it ends, the stack size decreases by one
The elements of the stack are called stack frames, which contain the local variables for the nested method.

def recursive_coffee(line, pos = 0)
base case(the last person in line)
return line[pos] if pos == line.length - 1
inductive steps
line[pos] + recursive_coffee(line, pos + 1)
end

quicksort- a sorting algorithim 
if an array is one or empty then it is considered sorted